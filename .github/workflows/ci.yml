name: CI/CD

on:
  workflow_dispatch:
    inputs:
      ref:
        description: branch|tag|SHA to checkout
        default: 'main'
        required: true
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }} >> .env
          echo MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} >> .env
          echo TZ=${{ secrets.TZ }} >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env
          echo S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} >> .env
          echo S3_URL=${{ secrets.S3_URL }} >> .env

      - name: Build and run Docker containers
        run: |
          docker compose build --no-cache
          docker compose up -d

      - name: Wait for DB connection
        run: |
          for i in {1..30}; do
            docker compose exec -T db mysql -uroot -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SELECT 1;" && break || sleep 5
          done

      - name: Create DB
        run: docker compose exec -T app rails db:create

      - name: Run migrations
        run: docker compose exec -T app rails db:migrate

      - name: Load seed data
        run: docker compose exec -T app rails db:seed

      - name: Run Rubocop
        run: docker compose exec -T app bundle exec rubocop

      - name: Run RSpec
        run: docker compose exec -T app bin/rspec

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/.resultset.json

      - name: Stop and remove Docker containers
        run: docker compose down

  build_and_push_image_web:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./nginx/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/hayabusatrip_web:latest

  build_and_push_image_app:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/hayabusatrip_app:latest

  deploy-ecs:
    needs:
      - build_and_push_image_web
      - build_and_push_image_app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create task-definition.json from template
        run: |
          sed "s#AWS_ACCOUNT_ID_PLACEHOLDER#${{ secrets.AWS_ACCOUNT_ID }}#" aws/task-definition-template.json > aws/task-definition.json
          sed -i "s#RAILS_MASTER_KEY_PLACEHOLDER#${{ secrets.RAILS_MASTER_KEY }}#" aws/task-definition.json
          sed -i "s#DB_DATABASE_PLACEHOLDER#${{ secrets.DB_DATABASE }}#" aws/task-definition.json
          sed -i "s#DB_HOST_PLACEHOLDER#${{ secrets.DB_HOST }}#" aws/task-definition.json
          sed -i "s#DB_PORT_PLACEHOLDER#${{ secrets.DB_PORT }}#" aws/task-definition.json
          sed -i "s#DB_USERNAME_PLACEHOLDER#${{ secrets.DB_USERNAME }}#" aws/task-definition.json
          sed -i "s#DB_PASSWORD_PLACEHOLDER#${{ secrets.DB_PASSWORD }}#" aws/task-definition.json
          sed -i "s#AWS_ACCESS_KEY_ID_PLACEHOLDER#${{ secrets.AWS_ACCESS_KEY_ID }}#" aws/task-definition.json
          sed -i "s#AWS_SECRET_ACCESS_KEY_PLACEHOLDER#${{ secrets.AWS_SECRET_ACCESS_KEY }}#" aws/task-definition.json
          sed -i "s#AWS_REGION_PLACEHOLDER#${{ secrets.AWS_REGION }}#" aws/task-definition.json
          sed -i "s#S3_BUCKET_NAME_PLACEHOLDER#${{ secrets.S3_BUCKET_NAME }}#" aws/task-definition.json
          sed -i "s#S3_URL_PLACEHOLDER#${{ secrets.S3_URL }}#" aws/task-definition.json

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: aws/task-definition.json
          service: hayabusatrip-service
          cluster: hayabusatrip-cluster
          wait-for-service-stability: true

      - name: Get latest task definition revision
        id: get-latest-revision
        run: |
          revision=$(aws ecs list-task-definitions --family-prefix hayabusatrip-task --sort DESC --max-items 1 --query 'taskDefinitionArns[0]' --output text | awk -F ':' '{print $NF}' | awk 'NR==1{print $1}')
          echo "revision=$revision" >> $GITHUB_ENV

      - name: Seed database
        run: |
          aws ecs run-task --cluster hayabusatrip-cluster \
          --task-definition hayabusatrip-task:${{ env.revision }} \
          --count 1 \
          --launch-type FARGATE \
          --started-by GitHubActions \
          --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNETS }}],securityGroups=[${{ secrets.SECURITY_GROUPS }}],assignPublicIp=ENABLED}" \
          --overrides '{"containerOverrides": [{"name": "hayabusatrip_app","command": ["bundle","exec","rails","db:seed"]}]}'
